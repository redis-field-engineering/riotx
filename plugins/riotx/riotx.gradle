plugins {
    id 'application'
    id 'org.jreleaser.jdks'
    id 'org.ajoberstar.git-publish'
}

application {
    applicationName = 'riotx'
    mainClass       = 'com.redis.riot.Riotx'
}

jar {
    manifest {
        attributes([
            'Main-Class': 'com.redis.riot.Riotx',
            'Automatic-Module-Name': project.findProperty('automatic.module.name')
        ])
    }
}

startScripts {
    defaultJvmOpts = ["--add-opens=java.base/java.nio=ALL-UNNAMED"]
    classpath = files( '$APP_HOME/lib/*' )
}

test {
    jvmArgs += ["--add-opens=java.base/java.nio=ALL-UNNAMED"]
}

dependencies {
    implementation project(':spring-batch-redis-core')
    implementation project(':spring-batch-memcached')
    implementation project(':riot-file')
    implementation project(':riot-faker')
    implementation project(':riot-parquet')
    implementation 'org.slf4j:slf4j-simple'
    implementation group: 'me.tongfei', name: 'progressbar', version: progressbarVersion
    implementation group: 'org.latencyutils', name: 'LatencyUtils', version: latencyUtilsVersion
    implementation 'org.springframework.batch:spring-batch-infrastructure'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework:spring-jdbc'
    implementation 'com.zaxxer:HikariCP'
    implementation 'com.microsoft.sqlserver:mssql-jdbc'
    implementation 'com.mysql:mysql-connector-j'
    implementation 'com.oracle.database.jdbc:ojdbc11'
    implementation 'org.postgresql:postgresql'
    implementation group: 'info.picocli', name: 'picocli', version: picocliVersion
    annotationProcessor group: 'info.picocli', name: 'picocli-codegen', version: picocliVersion
    implementation group: 'com.tdunning', name: 't-digest', version: tdigestVersion
    implementation group: 'com.github.freva', name: 'ascii-table', version: asciitableVersion
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.prometheus:prometheus-metrics-exporter-httpserver'
    implementation 'org.xerial:sqlite-jdbc'
    implementation 'com.ibm.db2:jcc'
    implementation group: 'net.snowflake', name: 'snowflake-jdbc', version: snowflakeVersion

    testImplementation project(':spring-batch-redis-test')
    testImplementation 'io.micrometer:micrometer-core'
    testImplementation 'org.hsqldb:hsqldb'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-jdbc'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:oracle-xe'
    testImplementation group: 'com.redis', name: 'testcontainers-memcached', version: testcontainersRedisVersion
    testImplementation group: 'com.redis', name: 'lettucemod', version: lettucemodVersion, classifier: 'tests'
    
}

distributions {
    main {
        contents {
            from('../..') {
                include 'LICENSE'
                include 'VERSION'
            }
        }
    }
}

jdks {
    zulu21Linux {
        platform = 'linux-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-linux_x64.tar.gz'
        checksum = '5320a33714f58c0104191d244759daa6a6d46819d447347ba9003132e5489d92'
    }
    zulu21LinuxArm {
        platform = 'linux-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-linux_aarch64.tar.gz'
        checksum = '8bd387315620bb66a84945a51bcebb9016354b557c747e94d4837e68ea4077ec'
    }
    zulu21LinuxMusl {
        platform = 'linux_musl-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-linux_musl_x64.tar.gz'
        checksum = '8d383d47238b44361761edc9e169a215560009b15a0f8f56090583fc4b4709b6'
    }
    zulu21LinuxMuslArm {
        platform = 'linux_musl-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-linux_musl_aarch64.tar.gz'
        checksum = 'b4725425f48138c59e1ee53b59aa5217c5e4571b63d6a801af6809f1e74e95b9'
    }
    zulu21Windows {
        platform = 'windows-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-win_x64.zip'
        checksum = '8dea44fd3a6f7ad0f42f38abc1371075710b58bed9bd8f093c2ef2d450dd2672'
    }
    zulu21WindowsArm {
        platform = 'windows-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-win_aarch64.zip'
        checksum = 'f5ad7f539f74d12b6248c0fd9f4b416455dcf6803900b28e8d19054f3dcc6e98'
    }
    zulu21Osx {
        platform = 'osx-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-macosx_x64.zip'
        checksum = 'a77a9c67d8f9a2341674bcea7056d9d70f69ff0850dd3874303641cc9cec2dfc'
    }
    zulu21OsxArm {
        platform = 'osx-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-macosx_aarch64.zip'
        checksum = 'd5c289ce2c8c67f414ede3b170dea72ca9a1322520498325a51d83bbaa94d1f0'
    }
}

bootStartScripts.dependsOn jar

afterEvaluate {
    def copyJdksToCache = project.tasks.findByName('copyJdksToCache')
    ['zulu21Linux', 'zulu21LinuxArm', 'zulu21LinuxMusl', 'zulu21LinuxMuslArm',
     'zulu21Windows', 'zulu21WindowsArm', 'zulu21Osx', 'zulu21OsxArm'].each { jdk ->
        def copyTask = project.tasks.findByName('copyJdkFromCache' + jdk.capitalize())
        if (copyJdksToCache && copyTask) copyTask.dependsOn(copyJdksToCache)
    }
}

mainClassName = "com.redis.riot.Riox"

task copyRuntimeDependencies(type: Copy) {
    into "$buildDir/dependencies/flat"
    from configurations.runtimeClasspath
}

assemble.dependsOn(copyRuntimeDependencies)

project.rootProject.gradle.addBuildListener(new BuildAdapter() {
    @Override
    void projectsEvaluated(Gradle gradle) {
        gradle.rootProject.subprojects
            .find { p -> p.name == 'riotx' }
            .processResources {
                inputs.property('build_date', gradle.rootProject.config.buildInfo.buildDate + ':' + gradle.rootProject.config.buildInfo.buildTime)
                filesMatching(['**/RiotVersion.properties']) {
                    expand(
                        'riot_version': gradle.rootProject.version,
                        'build_date': gradle.rootProject.config.buildInfo.buildDate,
                        'build_time': gradle.rootProject.config.buildInfo.buildTime,
                        'build_revision': gradle.rootProject.config.buildInfo.buildRevision
                    )
                }
            }
    }
})

task generateManpageAsciiDoc(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath(configurations.compileClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
    main 'picocli.codegen.docgen.manpage.ManPageGenerator'
    args "com.redis.riot.Riotx", "--outdir=${project.buildDir}/generated-riotx-docs", "-v"
}

apply plugin: 'org.asciidoctor.jvm.convert'
asciidoctor {
    dependsOn(generateManpageAsciiDoc)
    sourceDir = file("${project.buildDir}/generated-riotx-docs")
    outputDir = file("${project.buildDir}/docs")
    logDocuments = true
    outputOptions {
        backends = ['manpage', 'html5']
    }
}

gitPublish {
    repoUri = 'https://github.com/redis-field-engineering/riotx'
    branch = 'gh-pages'

    contents {
        from ('build/docs/html5/') {
           into 'manpage'
        }
    }
    
    preserve {
        include '*/**'
    }

    commitMessage = 'Publishing man page'
}

gitPublishCopy.dependsOn(asciidoctor)
gitPublishCommit.dependsOn(asciidoctor)
