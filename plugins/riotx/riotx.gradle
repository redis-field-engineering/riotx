plugins {
    id 'application'
    id 'org.jreleaser.jdks'
}

application {
    applicationName = 'riotx'
    mainClass       = 'com.redis.riotx.Riotx'
}

jar {
    manifest {
        attributes([
            'Main-Class': 'com.redis.riotx.Riotx',
            'Automatic-Module-Name': project.findProperty('automatic.module.name')
        ])
    }
}

startScripts {
    classpath = files('$APP_HOME/lib/*')
}

dependencies {
    implementation group: 'com.redis', name: 'riot', version: riotVersion
    implementation group: 'com.redis', name: 'spring-batch-memcached', version: springBatchRedisVersion
    api group: 'info.picocli', name: 'picocli', version: picocliVersion
    annotationProcessor group: 'info.picocli', name: 'picocli-codegen', version: picocliVersion
    implementation group: 'net.snowflake', name: 'snowflake-jdbc', version: snowflakeVersion
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation group: 'com.redis', name: 'riot-test', version: riotVersion 
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'io.micrometer:micrometer-core'
    testImplementation 'org.springframework.boot:spring-boot-autoconfigure'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.hsqldb:hsqldb'
    testImplementation group: 'com.redis', name: 'testcontainers-memcached', version: testcontainersRedisVersion
    testImplementation group: 'com.redis', name: 'lettucemod', version: lettucemodVersion, classifier: 'tests'
}

distributions {
    main {
        contents {
            from('../..') {
                include 'LICENSE'
                include 'VERSION'
            }
        }
    }
}

jdks {
    zulu17Linux {
        platform = 'linux-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_x64.zip'
        checksum = 'c89977771091eb7d53e0f244a722076e88d968966b75aba2a65a1b31105d68bb'
    }
    zulu17LinuxArm {
        platform = 'linux-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_aarch64.tar.gz'
        checksum = '518cc455c0c7b49c0ae7d809c0bb87ab371bb850d46abb8efad5010c6a06faec'
    }
    zulu17LinuxMusl {
        platform = 'linux_musl-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_musl_x64.tar.gz'
        checksum = '22bbde6e05ced1238b302e2b44d3f9785c23e4115618eea83786b6b4a1828f9f'
    }
    zulu17LinuxMuslArm {
        platform = 'linux_musl-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_musl_aarch64.tar.gz'
        checksum = 'fc6645aa46736e6100302c109127ea31a1d1192599b7140dd94f81eaeebfe293'
    }
    zulu17Windows {
        platform = 'windows-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_x64.zip'
        checksum = '43f0f1bdecf48ba9763d46ee7784554c95b442ffdd39ebd62dc8b297cc82e116'
    }
    zulu17WindowsArm {
        platform = 'windows-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_aarch64.zip'
        checksum = 'b8833d272eb31f54f8c881139807a28a74de9deae07d2cc37688ff72043e32c9'
    }
    zulu17Osx {
        platform = 'osx-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_x64.zip'
        checksum = '3f653ad00a29b3ae2abebcfc598225f674d3289e52497b310441f3fb5d785f8a'
    }
    zulu17OsxArm {
        platform = 'osx-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_aarch64.zip'
        checksum = '5aec103fc90131dc34cb1be6290dd61c426a74f1bf7e8b4895049cd27fee70a8'
    }
}

bootStartScripts.dependsOn jar

afterEvaluate {
    def copyJdksToCache = project.tasks.findByName('copyJdksToCache')
    ['zulu17Linux', 'zulu17LinuxArm', 'zulu17LinuxMusl', 'zulu17LinuxMuslArm',
     'zulu17Windows', 'zulu17WindowsArm', 'zulu17Osx', 'zulu17OsxArm'].each { jdk ->
        def copyTask = project.tasks.findByName('copyJdkFromCache' + jdk.capitalize())
        if (copyJdksToCache && copyTask) copyTask.dependsOn(copyJdksToCache)
    }
}

mainClassName = "com.redis.riotx.Riox"

task copyRuntimeDependencies(type: Copy) {
    into "$buildDir/dependencies/flat"
    from configurations.runtimeClasspath
}

assemble.dependsOn(copyRuntimeDependencies)

project.rootProject.gradle.addBuildListener(new BuildAdapter() {
    @Override
    void projectsEvaluated(Gradle gradle) {
        gradle.rootProject.subprojects
            .find { p -> p.name == 'riotx' }
            .processResources {
                inputs.property('build_date', gradle.rootProject.config.buildInfo.buildDate + ':' + gradle.rootProject.config.buildInfo.buildTime)
                filesMatching(['**/RiotxVersion.properties']) {
                    expand(
                        'riotx_version': gradle.rootProject.version,
                        'build_date': gradle.rootProject.config.buildInfo.buildDate,
                        'build_time': gradle.rootProject.config.buildInfo.buildTime,
                        'build_revision': gradle.rootProject.config.buildInfo.buildRevision
                    )
                }
            }
    }
})