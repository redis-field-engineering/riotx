buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.ajoberstar:gradle-git-publish:$gitPluginVersion"
        classpath "org.jreleaser:jdks-gradle-plugin:$jdksPluginVersion"
        classpath "org.kordamp.gradle:guide-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:java-project-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:jacoco-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:kordamp-parentbuild:$kordampBuildVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$bootPluginVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyPluginVersion"
    }
}

apply plugin: 'org.kordamp.gradle.kordamp-parentbuild'

rootProject.name = 'riotx'

projects {
    directories = ['core', 'plugins', 'spring-batch', 'docs']

    plugins {
        all {
            id 'eclipse'
        }
        path(':') {
            id 'org.kordamp.gradle.java-project'
        }
        dirs(['spring-batch', 'core', 'plugins']) {
            id 'java-library'
            id 'org.springframework.boot'
            id 'io.spring.dependency-management'
        }
    }
}

enforce {
    rule(enforcer.rules.RequireJavaVersion) { r ->
        r.version.set('17')
    }
    rule(enforcer.rules.EnforceBytecodeVersion) { r ->
        // search only on compile and runtime classpaths
        r.configurations.addAll(['compileClasspath', 'runtimeClasspath'])
        r.maxJdkVersion = '17'
    }
    rule(enforcer.rules.BanDuplicateClasses) { r ->
        r.enabled = false
    }
    rule(enforcer.rules.DependencyConvergence) { r ->
        r.enabled = false
    }
}