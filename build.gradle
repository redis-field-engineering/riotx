config {
    info {
        description = 'RIOT-X'
        inceptionYear = '2024'
        vendor = 'Redis'
        tags = ['redis', 'tool', 'import', 'export', 'replication', 'enterprise']

        links {
            website      = "https://github.com/redis-field-engineering/${project.rootProject.name}"
            issueTracker = "https://github.com/redis-field-engineering/${project.rootProject.name}/issues"
            scm          = "https://github.com/redis-field-engineering/${project.rootProject.name}.git"
        }

        scm {
            url                 = "https://github.com/redis-field-engineering/${project.rootProject.name}"
            connection          = "scm:git:https://github.com/redis-field-engineering/${project.rootProject.name}.git"
            developerConnection = "scm:git:git@github.com:redis-field-engineering/${project.rootProject.name}.git"
        }

        specification {
            enabled = true
        }

        implementation {
            enabled = true
        }
        
        people {
            clearDomainSet()
            person {
                id    = 'jruaux'
                name  = 'Julien Ruaux'
                roles = ['developer', 'author']
            }
        }
    }

    docs {
        javadoc {
            enabled = false
        }
    }
    
    licensing {
        enabled = false
    }

    coverage {
        jacoco {
            enabled = true
            toolVersion = jacocoPluginVersion
        }
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    ext['lettuce.version'] = lettuceVersion
}

subprojects { subproj ->
    if (!subproj.name.contains('guide')) {
    
        config {
	        info {
	            description = project.project_description
	        }
            coverage {
                jacoco {
		            toolVersion = jacocoPluginVersion
                }
            }
	    }

	    license {
	        exclude('build/**')
	    }
	    
	    dependencyManagement {
		    imports {
		       mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:$gcpVersion"
		    }
		}

	    dependencies {
            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.projectlombok:lombok'
            testImplementation 'org.junit.jupiter:junit-jupiter-api'
            testImplementation 'org.junit.jupiter:junit-jupiter-params'
            testImplementation 'org.junit.jupiter:junit-jupiter-engine'
            testImplementation 'org.junit.platform:junit-platform-launcher'
            testImplementation 'org.testcontainers:junit-jupiter'
            testImplementation 'org.slf4j:slf4j-simple'
	        testImplementation group: 'com.redis', name: 'testcontainers-redis', version: testcontainersRedisVersion
	    }

	    test {
	        useJUnitPlatform()
	    }

	    configurations {
	        all*.exclude module: 'spring-boot-starter-logging'
	        all*.exclude module: 'commons-logging'
	    }

	    bootJar {
            enabled = false
        }

        jar {
            enabled = true
            archiveClassifier = ''
        }

	}
}

subprojects { p ->
    config {
        coverage {
            jacoco {
                enabled = hasTestsAt(p.file('src/test'))
		        toolVersion = jacocoPluginVersion
            }
        }
    }
}

boolean hasTestsAt(File testDir) {
    testDir.exists() && testDir.listFiles()?.size()
}